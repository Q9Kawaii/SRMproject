"use client";
import React, { useEffect, useState } from "react";
import { getAuth, onAuthStateChanged } from "firebase/auth";
import { getFirestore, doc, getDoc, setDoc, onSnapshot } from "firebase/firestore";
import { jsPDF } from "jspdf";
import autoTable from "jspdf-autotable";
import StudentAttendancePage from "./Upload-Attendance/StudentAttendancePage";
import { useRouter } from "next/navigation";
import StudentAchievementsPortal from "../achievementsPage/page";

const FIELD_CONFIG = [
  { label: "Registration Number", name: "regNo", readOnly: true },
  { label: "Name Of Student", name: "name" },
  { label: "Gender", name: "gender" },
  { label: "Date of Birth (D.O.B.)", name: "dob", type: "date" },
  { label: "Department", name: "department" },
  { label: "Specialization", name: "specialization" },
  { label: "Section", name: "section" },
  { label: "Official Email", name: "email", type: "email" },
  { label: "Personal Email", name: "personalEmail", type: "email" },
  { label: "Mobile No.", name: "phone", type: "tel" },
  { label: "Alternate Contact Number", name: "alternatePhone", type: "tel" },
  { label: "Father Mobile No.", name: "fatherPhone", type: "tel" },
  { label: "Father Email ID", name: "parentEmail", type: "email" },
  { label: "Mother Mobile No.", name: "motherPhone", type: "tel" },
  { label: "Mother Email ID", name: "motherEmail", type: "email" },
  { label: "Guardian Contact Number", name: "guardianPhone", type: "tel" },
  { label: "Name of Faculty Advisor", name: "advisorName" },
  { label: "Date Of Admission", name: "dateOfAdmission", type: "date" },
];

export default function StudentsDashBoard({ regNo: propRegNo, section: propSection }) {
  const [declineAlert, setDeclineAlert] = useState(null);
  const [studentData, setStudentData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [isEditing, setIsEditing] = useState(false);
  const [originalData, setOriginalData] = useState(null);
  const [isSaving, setIsSaving] = useState(false);
  const db = getFirestore();
  const router = useRouter();

  const handleChange = (e) => {
    const { name, value } = e.target;
    setStudentData((prev) => ({ ...prev, [name]: value }));
  };

  const handlePlacementMatrixRedirect = () => {
    router.push('/placement-matrix');
  };

  const generatePDF = () => {
    if (!studentData) return;
    const doc = new jsPDF();
    doc.setFontSize(20);
    doc.text("Student Profile Report", 14, 20);

    // Add student name and reg number
    doc.setFontSize(12);
    doc.text(`Name: ${studentData.name || 'N/A'}`, 14, 35);
    doc.text(`Registration Number: ${studentData.regNo || 'N/A'}`, 14, 45);
    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 14, 55);

    // Prepare table data
    const tableData = FIELD_CONFIG.map(field => [
      field.label,
      studentData[field.name] || "-"
    ]);

    // Generate table
    autoTable(doc, {
      head: [['Field', 'Value']],
      body: tableData,
      startY: 65,
      theme: 'striped',
      headStyles: {
        fillColor: [30, 64, 175],
        textColor: 255,
        fontStyle: 'bold',
        fontSize: 11
      },
      styles: {
        cellPadding: 4,
        fontSize: 9,
        valign: 'middle'
      },
      columnStyles: {
        0: { cellWidth: 80, fontStyle: 'bold' },
        1: { cellWidth: 'auto' }
      }
    });

    // Add basic score
    const finalY = doc.lastAutoTable.finalY + 15;
    doc.setFontSize(14);
    doc.setFont(undefined, 'bold');

    // Add footer
    doc.setFontSize(8);
    doc.setFont(undefined, 'normal');
    doc.text('Generated by SRM Student Dashboard System', 14, finalY + 20);

    doc.save(`${studentData.name || 'student'}_profile_${new Date().getTime()}.pdf`);
  };

  const dismissAlert = () => {
    setDeclineAlert(null);
  };

  const handleSave = async () => {
    if (isSaving) return;
    setIsSaving(true);
    try {
      // 3. Collect ALL changed fields
      const changes = {};
      Object.keys(studentData).forEach(key => {
        if (studentData[key] !== originalData[key]) {
          changes[key] = studentData[key];
        }
      });

      // 4. Save to PendingUpdates with filtered original values
      if (Object.keys(changes).length > 0) {
        const filteredOriginal = Object.fromEntries(
          Object.keys(changes)
            .map(k => [k, originalData[k]])
            .filter(([key, value]) => value !== undefined && value !== null)
        );

        const pendingRef = doc(db, "PendingUpdates", studentData.regNo);
        await setDoc(pendingRef, {
          regNo: studentData.regNo || studentData.regNo,
          updates: changes,
          original: filteredOriginal,
          status: "pending",
          timestamp: new Date().toISOString(),
          studentName: studentData.name || 'Unknown'
        }, { merge: true });

        setIsEditing(false);
        setError("Changes submitted successfully! Waiting for teacher approval.");
      } else {
        setError("No changes detected to save.");
      }
    } catch (err) {
      console.error('Save error:', err);
      setError("Error submitting changes: " + err.message);
    } finally {
      setIsSaving(false);
    }
  };

  useEffect(() => {
    const auth = getAuth();

    const fetchData = async (user) => {
      try {
        let registrationNumber = propRegNo;

        if (!registrationNumber) {
          const userLoginRef = doc(db, "UsersLogin", user.uid);
          const userLoginSnap = await getDoc(userLoginRef);

          if (!userLoginSnap.exists()) {
            setError("Registration number not found. Please contact administrator.");
            setLoading(false);
            return;
          }

          registrationNumber = userLoginSnap.data()?.regNo;
        }

        if (!registrationNumber) {
          setError("Registration number missing. Please contact administrator.");
          setLoading(false);
          return;
        }

        const studentRef = doc(db, "User", registrationNumber);
        const studentSnap = await getDoc(studentRef);

        if (studentSnap.exists()) {
          const data = { ...studentSnap.data(), regNo: registrationNumber };
          setStudentData(data);
          setOriginalData(data);
        } else {
          const newStudentData = { 
            regNo: registrationNumber,
            createdAt: new Date().toISOString()
          };
          await setDoc(studentRef, newStudentData);
          setStudentData(newStudentData);
          setOriginalData(newStudentData);
        }

      } catch (err) {
        console.error('Fetch error:', err);
        setError("Error loading data: " + err.message);
      } finally {
        setLoading(false);
      }
    };

    const unsubscribe = onAuthStateChanged(auth, (user) => {
      if (user) {
        fetchData(user);
      } else {
        setError("Please log in to access your dashboard.");
        setLoading(false);
      }
    });

    return () => unsubscribe();
  }, [db, propRegNo]);

  useEffect(() => {
    if (!studentData?.regNo) return;
    const docRef = doc(db, "PendingUpdates", studentData.regNo);
    const unsubscribe = onSnapshot(docRef, (docSnap) => {
      if (docSnap.exists()) {
        const data = docSnap.data();
        if (data.status === "declined" && data.message) {
          setDeclineAlert({
            message: data.message,
            timestamp: data.timestamp
          });
        } else {
          setDeclineAlert(null);
        }
      } else {
        setDeclineAlert(null);
      }
    });
    return () => unsubscribe();
  }, [studentData?.regNo]);

  const handleAchievementsRedirect = () => {
    if (studentData?.regNo) {
      router.push(`/achievementsPage?regNo=${encodeURIComponent(studentData.regNo)}`);
    } else {
      setError("Registration number not available for redirect.");
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
          <div className="text-xl text-gray-600">Loading Student Dashboard...</div>
        </div>
      </div>
    );
  }

  return (
    <div className="relative min-h-screen w-full flex flex-col items-center justify-center text-center px-4 pt-10 overflow-hidden -mb-40 lg:items-end lg:text-end lg:pb-40 lg:pr-[10%]">
      {/* Animated Background Elements */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        <div className="absolute -top-40 -right-40 w-80 h-80 bg-blue-200 rounded-full mix-blend-multiply filter blur-xl opacity-30 animate-pulse"></div>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-blue-300 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse delay-500"></div>
        <div className="absolute bottom-20 left-20 w-64 h-64 bg-[#3a5b72] rounded-full mix-blend-multiply filter blur-xl opacity-25 animate-pulse delay-1000"></div>
      </div>

      {/* Floating Geometric Shapes */}
      <div className="absolute top-20 left-20 w-4 h-4 bg-[#0c4da2] transform rotate-45 animate-bounce delay-300"></div>
      <div className="absolute top-40 right-32 w-6 h-6 bg-[#3a5b72] rounded-full animate-bounce delay-700"></div>
      <div className="absolute bottom-40 left-32 w-5 h-5 bg-blue-400 transform rotate-45 animate-bounce delay-1000"></div>

      <div
        className="absolute inset-0 bg-cover bg-center bg-no-repeat -z-10 opacity-10"
        style={{
          backgroundImage: 'url("/Dashboard-bg4.jpg")',
          backgroundSize: '900px',
          backgroundRepeat: "no-repeat",
          backgroundPosition: '0% -55px',
        }}
      />

      <div className="relative z-10 w-full max-w-4xl">
        {/* Header Section */}
        <div className="inline-block p-8 bg-white/90 backdrop-blur-sm rounded-3xl shadow-2xl mb-8 border border-blue-100 hover:shadow-3xl transition-all duration-500 hover:-translate-y-1">
          <div className="w-16 h-16 mx-auto bg-gradient-to-r from-[#0c4da2] to-[#3a5b72] rounded-full flex items-center justify-center shadow-lg mb-4">
            <svg xmlns="http://www.w3.org/2000/svg" className="w-8 h-8 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
            </svg>
          </div>
          <h1 className="text-3xl sm:text-4xl font-bold mb-4 lg:mb-6 lg:text-7xl">
            <span className="text-[#0c4da2] relative">
              Student
              <div className="absolute -bottom-2 left-0 w-full h-1 bg-gradient-to-r from-[#0c4da2] to-[#3a5b72] rounded-full"></div>
            </span>{" "}
            <span className="text-[#3a5b72]">Dashboard</span>
          </h1>

          <p className="text-lg text-[#0c4da2] font-bold mb-2 lg:text-3xl">
            Welcome, {studentData?.name || "Student"}
          </p>
          <p className="text-sm text-[#0c4da2] font-medium italic mb-4">
            Track attendance, academics, and placement progress
          </p>
          <p className="text-xs text-gray-600">
            SRM Institute of Science and Technology – Empowering Students for the Future
          </p>
        </div>



        {/* Main Content */}
        <div className="bg-white/90 backdrop-blur-sm rounded-3xl shadow-2xl border border-blue-100 overflow-hidden">
          <div className="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-[#0c4da2] to-[#3a5b72]"></div>
          
          <div className="p-8">
            {error && (
              <div className="mb-6 p-4 bg-red-50/90 backdrop-blur-sm border-l-4 border-red-500 rounded-r-xl shadow-lg">
                <div className="flex items-center">
                  <svg className="w-5 h-5 text-red-500 mr-2" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                  </svg>
                  <p className="text-red-600 font-medium">{error}</p>
                </div>
              </div>
            )}

            {/* Absence Reason Input for Low Attendance Alert */}
            {studentData?.attendanceAlert && !isEditing && (
              <form
                onSubmit={async (e) => {
                  e.preventDefault();
                  try {
                    await setDoc(
                      doc(getFirestore(), "User", studentData.regNo),
                      { 
                        absenceReason: studentData.absenceReason || "",
                        reasonSubmittedAt: new Date().toISOString()
                      },
                      { merge: true }
                    );
                    setError("Absence reason submitted successfully!");
                  } catch (err) {
                    setError("Failed to submit reason: " + err.message);
                  }
                }}
                className="mb-8 p-6 bg-yellow-50/90 backdrop-blur-sm rounded-2xl shadow-lg border border-yellow-200"
              >
                <div className="flex items-center gap-3 mb-4">
                  <div className="w-12 h-12 bg-gradient-to-r from-yellow-400 to-yellow-600 rounded-full flex items-center justify-center">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
                    </svg>
                  </div>
                  <div>
                    <label className="block text-lg font-bold text-yellow-700">
                      Low Attendance Alert
                    </label>
                    <p className="text-sm text-yellow-600">Please provide a reason for your absenteeism:</p>
                  </div>
                </div>
                <input
                  type="text"
                  name="absenceReason"
                  value={studentData.absenceReason || ""}
                  onChange={(e) =>
                    setStudentData((prev) => ({
                      ...prev,
                      absenceReason: e.target.value,
                    }))
                  }
                  className="w-full px-4 py-3 border-2 border-yellow-300 rounded-xl bg-white/90 backdrop-blur-sm focus:border-yellow-500 focus:outline-none transition-colors duration-300 mb-4"
                  placeholder="Explain your absence reason..."
                  required
                />
                <button
                  type="submit"
                  className="px-6 py-3 bg-gradient-to-r from-yellow-500 to-yellow-600 text-white font-bold rounded-xl shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 transition-all duration-300"
                >
                  Submit Reason
                </button>
              </form>
            )}

            {studentData && (
              <form
                onSubmit={(e) => {
                  e.preventDefault();
                  if (isEditing) handleSave();
                  else setIsEditing(true);
                }}
                className="grid grid-cols-1 md:grid-cols-2 gap-6"
              >
                {FIELD_CONFIG.map((field) => (
                  <div key={field.name} className="text-left">
                    <label className="block text-sm font-bold text-[#0c4da2] mb-2">
                      {field.label}
                    </label>
                    {isEditing && !field.readOnly ? (
                      <input
                        type={field.type || "text"}
                        name={field.name}
                        value={studentData[field.name] || ""}
                        onChange={handleChange}
                        className="w-full px-4 py-3 border-2 border-blue-200 rounded-xl bg-white/90 backdrop-blur-sm focus:border-[#0c4da2] focus:outline-none transition-colors duration-300 focus:ring-2 focus:ring-blue-100"
                      />
                    ) : (
                      <div className="p-4 bg-gray-50/80 backdrop-blur-sm rounded-xl min-h-[50px] border border-gray-200 shadow-sm flex items-center">
                        {studentData[field.name] ? (
                          <span className="text-gray-800">{studentData[field.name]}</span>
                        ) : (
                          <span className="text-gray-400 italic">Not provided</span>
                        )}
                      </div>
                    )}
                  </div>
                ))}

                <button
                  onClick={handleAchievementsRedirect}
                  className="group relative px-8 py-4 bg-white/10 backdrop-blur-md border border-white/20 text-slate-800 font-semibold rounded-2xl shadow-xl hover:shadow-2xl transform hover:-translate-y-1 transition-all duration-300 hover:bg-white/20 hover:border-white/30"
                  style={{
                    background: 'linear-gradient(135deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0.05) 100%)',
                    backdropFilter: 'blur(10px)'
                  }}
                >
                  <div className="flex items-center gap-3">
                    <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
                      <span className="text-white text-sm">🎖️</span>
                    </div>
                    <span className="text-lg bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent font-bold">
                      Achievements Portal
                    </span>
                    <span className="text-blue-600 group-hover:translate-x-1 transition-transform duration-300">→</span>
                  </div>
                </button>
                <button
                  onClick={handlePlacementMatrixRedirect}
                  className="group relative px-8 py-4 bg-white/10 backdrop-blur-md border border-white/20 text-slate-800 font-semibold rounded-2xl shadow-xl hover:shadow-2xl transform hover:-translate-y-1 transition-all duration-300 hover:bg-white/20 hover:border-white/30"
                  style={{
                    background: 'linear-gradient(135deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0.05) 100%)',
                    backdropFilter: 'blur(10px)'
                  }}
                >
                  <div className="flex items-center gap-3">
                    <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
                      <span className="text-white text-sm">🎖️</span>
                    </div>
                    <span className="text-lg bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent font-bold">
                      Placement Matrix
                    </span>
                    <span className="text-blue-600 group-hover:translate-x-1 transition-transform duration-300">→</span>
                  </div>
                </button>

                {/* Enhanced Action Buttons */}
                <div className="md:col-span-2 flex justify-end mt-10">
                  {isEditing ? (
                    <div className="flex space-x-4">
                      <button
                        type="submit"
                        disabled={isSaving}
                        className="px-8 py-3 bg-gradient-to-r from-green-500 to-green-600 text-white font-bold rounded-xl shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 transition-all duration-300 flex items-center disabled:opacity-50 disabled:cursor-not-allowed"
                      >
                        {isSaving ? (
                          <>
                            <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            Saving...
                          </>
                        ) : (
                          <>
                            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                            </svg>
                            Save Changes
                          </>
                        )}
                      </button>
                      <button
                        type="button"
                        disabled={isSaving}
                        className="px-8 py-3 bg-white/90 backdrop-blur-sm text-gray-600 font-bold rounded-xl shadow-lg border-2 border-gray-300 hover:bg-gray-100 transform hover:-translate-y-0.5 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
                        onClick={() => {
                          setIsEditing(false);
                          if (originalData) setStudentData(originalData);
                        }}
                      >
                        Cancel
                      </button>
                    </div>
                  ) : (
                    <div className="flex space-x-4">
                      <button
                        type="button"
                        className="px-8 py-3 bg-gradient-to-r from-[#0c4da2] to-[#3a5b72] text-white font-bold rounded-xl shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 transition-all duration-300 hover:from-[#3a5b72] hover:to-[#0c4da2] flex items-center"
                        onClick={(e) => {
                          e.preventDefault();
                          setIsEditing(true);
                        }}
                      >
                        <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                        </svg>
                        Edit Profile
                      </button>
                      <button
                        type="button"
                        className="px-8 py-3 bg-white/90 backdrop-blur-sm text-[#0c4da2] font-bold rounded-xl shadow-lg border-2 border-[#0c4da2] hover:bg-[#0c4da2] hover:text-white transform hover:-translate-y-0.5 transition-all duration-300 flex items-center"
                        onClick={generatePDF}
                      >
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          className="h-5 w-5 mr-2"
                          viewBox="0 0 20 20"
                          fill="currentColor"
                        >
                          <path
                            fillRule="evenodd"
                            d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z"
                            clipRule="evenodd"
                          />
                        </svg>
                        Download PDF
                      </button>
                    </div>
                  )}
                </div>
              </form>
            )}
          </div>
        </div>
      </div>

      {/* Enhanced Decline Alert */}
      {declineAlert && (
        <div className="fixed top-4 right-4 z-50 bg-yellow-50/95 backdrop-blur-sm border-l-4 border-yellow-500 text-yellow-700 p-6 rounded-r-xl shadow-2xl max-w-md">
          <div className="flex items-start justify-between">
            <div className="flex items-start gap-3">
              <div className="w-8 h-8 bg-yellow-500 rounded-full flex items-center justify-center flex-shrink-0 mt-1">
                <svg className="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-.993.883L9 6v3a1 1 0 001.993.117L11 9V6a1 1 0 00-1-1z" clipRule="evenodd" />
                </svg>
              </div>
              <div>
                <div className="font-bold text-lg">Update Declined</div>
                <p className="mt-1 text-sm">{declineAlert.message}</p>
                <div className="text-xs mt-2 text-yellow-600">
                  {declineAlert.timestamp && new Date(declineAlert.timestamp).toLocaleString()}
                </div>
              </div>
            </div>
            <button
              onClick={dismissAlert}
              className="ml-4 text-yellow-700 hover:text-yellow-900 font-bold text-xl transition-colors duration-200"
            >
              ×
            </button>
          </div>
        </div>
      )}

      <div className="pt-12">
        <StudentAttendancePage studentRegNo={studentData?.regNo}/>
      </div>
    </div>
  );
}
